package vn.edu.app.client.ui.dialog;

import vn.edu.app.client.remote.RMIConnector;
import vn.edu.app.client.util.UIUtils;
import vn.edu.app.client.util.Validators;
import vn.edu.app.common.dto.ClassDTO;
import vn.edu.app.common.dto.StudentDTO;
import vn.edu.app.common.remote.AdminService;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class StudentFormDialog extends JDialog {
    private JTextField tfId = new JTextField(18);
    private JTextField tfName = new JTextField(18);
    private JComboBox<String> cbGender = new JComboBox<>(new String[]{"M","F"});
    private JComboBox<ClassDTO> cbClass = new JComboBox<>();
    private JTextField tfPhone = new JTextField(18);
    private JTextField tfEmail = new JTextField(18);
    private JTextField tfAddress = new JTextField(18);
    private JTextField tfHometown = new JTextField(18);
    private JComboBox<String> cbStatus = new JComboBox<>(new String[]{"ACTIVE","GRADUATED","DROPPED","SUSPENDED"});

    private boolean confirmed = false;
    private final StudentDTO seed; // null => add

    public StudentFormDialog(Window owner, StudentDTO seed) {
        super(owner, (seed==null?"Add":"Edit") + " Student", ModalityType.APPLICATION_MODAL);
        this.seed = seed;
        setSize(460, 480);
        setLocationRelativeTo(owner);
        setLayout(new BorderLayout(10,10));
        setIconImage(UIUtils.icon("icons/student.png", 20,20).getImage());

        JPanel form = new JPanel(new GridBagLayout());
        GridBagConstraints g = new GridBagConstraints();
        g.insets = new Insets(6,6,6,6); g.fill = GridBagConstraints.HORIZONTAL;

        int r=0;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Student ID"), g); g.gridx=1; form.add(tfId, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Full name"), g); g.gridx=1; form.add(tfName, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Gender"), g); g.gridx=1; form.add(cbGender, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Class"), g); g.gridx=1; form.add(cbClass, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Phone"), g); g.gridx=1; form.add(tfPhone, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Email"), g); g.gridx=1; form.add(tfEmail, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Address"), g); g.gridx=1; form.add(tfAddress, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Hometown"), g); g.gridx=1; form.add(tfHometown, g); r++;
        g.gridx=0; g.gridy=r; form.add(new JLabel("Status"), g); g.gridx=1; form.add(cbStatus, g); r++;

        JPanel bottom = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton save = new JButton("Save", UIUtils.icon("icons/save.png",18,18));
        JButton cancel = new JButton("Cancel", UIUtils.icon("icons/exit.png",18,18));
        bottom.add(save); bottom.add(cancel);

        add(form, BorderLayout.CENTER);
        add(bottom, BorderLayout.SOUTH);

        cancel.addActionListener(e -> dispose());
        save.addActionListener(e -> onSave());

        loadClasses();
        if (seed != null) fill(seed);
    }

    private void loadClasses() {
        try {
            List<ClassDTO> list = RMIConnector.admin().getAllClasses();
            cbClass.removeAllItems();
            for (ClassDTO c : list) cbClass.addItem(c);
        } catch (Exception e) { e.printStackTrace(); UIUtils.error(this,"Load classes failed: " + e.getMessage()); }
    }

    private void fill(StudentDTO s) {
        tfId.setText(s.getStudentId()); tfId.setEditable(false);
        tfName.setText(s.getFullName());
        cbGender.setSelectedItem(s.getGender());
        for (int i=0;i<cbClass.getItemCount();i++) if (cbClass.getItemAt(i).getClassId().equals(s.getClassId())) { cbClass.setSelectedIndex(i); break; }
        tfPhone.setText(s.getPhone());
        tfEmail.setText(s.getEmail());
        tfAddress.setText(s.getAddress());
        tfHometown.setText(s.getHometown());
        cbStatus.setSelectedItem(s.getStatus());
    }

    private void onSave() {
        try {
            if (!Validators.isEmail(tfEmail.getText())) { UIUtils.error(this,"Invalid email"); return; }
            if (!Validators.isPhone(tfPhone.getText())) { UIUtils.error(this,"Invalid phone"); return; }

            StudentDTO s = new StudentDTO();
            s.setStudentId(tfId.getText().trim());
            s.setFullName(tfName.getText().trim());
            s.setGender((String) cbGender.getSelectedItem());
            s.setClassId(((ClassDTO) cbClass.getSelectedItem()).getClassId());
            s.setPhone(tfPhone.getText().trim());
            s.setEmail(tfEmail.getText().trim());
            s.setAddress(tfAddress.getText().trim());
            s.setHometown(tfHometown.getText().trim());
            s.setStatus((String) cbStatus.getSelectedItem());

            AdminService admin = RMIConnector.admin();
            boolean ok = (seed == null) ? admin.addStudent(s) : admin.updateStudent(s);
            if (ok) { confirmed = true; UIUtils.info(this,"Saved"); dispose(); }
            else UIUtils.error(this,"Save failed");
        } catch (Exception e) { e.printStackTrace(); UIUtils.error(this,e.getMessage()); }
    }

    public boolean isConfirmed() { return confirmed; }
}
