package vn.edu.app.client.ui.admin;

import vn.edu.app.client.remote.RMIConnector;
import vn.edu.app.client.ui.dialog.ClassFormDialog;
import vn.edu.app.client.util.UIUtils;
import vn.edu.app.common.dto.ClassDTO;
import vn.edu.app.common.dto.MajorDTO;
import vn.edu.app.common.remote.AdminService;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class ClassManagementPanel extends JPanel {
    private DefaultTableModel model = new DefaultTableModel(
            new String[]{"Class ID","Class Name","Course","Major"},0);
    private JTable table = new JTable(model);

    private List<MajorDTO> cachedMajors;

    public ClassManagementPanel() {
        setLayout(new BorderLayout(10,10));
        setBorder(BorderFactory.createEmptyBorder(10,10,10,10));

        // ===== TOP BAR =====
        JPanel top = new JPanel(new FlowLayout(FlowLayout.LEFT));
        top.setBackground(new Color(236, 240, 241));

        JButton btnAdd    = styledBtn("Add",    "icons/add.png",    new Color(46,204,113));
        JButton btnEdit   = styledBtn("Edit",   "icons/edit.png",   new Color(241,196,15));
        JButton btnDelete = styledBtn("Delete", "icons/delete.png", new Color(231,76,60));
        JButton btnReload = styledBtn("Reload", "icons/refresh.png",new Color(52,152,219));

        top.add(btnAdd); top.add(btnEdit); top.add(btnDelete); top.add(btnReload);

        add(top, BorderLayout.NORTH);
        add(new JScrollPane(table), BorderLayout.CENTER);

        // ===== STYLE TABLE =====
        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("Segoe UI", Font.BOLD, 13));
        header.setBackground(new Color(52,73,94));
        header.setForeground(Color.WHITE);
        table.setRowHeight(26);

        DefaultTableCellRenderer center = new DefaultTableCellRenderer();
        center.setHorizontalAlignment(SwingConstants.CENTER);
        table.setDefaultRenderer(Object.class, center);

        // ===== EVENTS =====
        btnReload.addActionListener(e -> load());
        btnAdd.addActionListener(e -> openForm(null));
        btnEdit.addActionListener(e -> editSelected());
        btnDelete.addActionListener(e -> deleteSelected());

        load();
    }

    private JButton styledBtn(String text, String icon, Color color) {
        JButton btn = new JButton(text, UIUtils.icon(icon,18,18));
        btn.setBackground(color);
        btn.setForeground(Color.WHITE);
        btn.setFocusPainted(false);
        btn.setFont(new Font("Segoe UI", Font.BOLD, 13));
        return btn;
    }

    private void load() {
        try {
            AdminService admin = RMIConnector.admin();
            List<ClassDTO> classes = admin.getAllClasses();
            cachedMajors = admin.getAllMajors();
            Map<String,String> majorMap = cachedMajors.stream()
                    .collect(Collectors.toMap(MajorDTO::getMajorId, MajorDTO::getMajorName));
            model.setRowCount(0);
            for (ClassDTO c : classes) {
                model.addRow(new Object[]{
                        c.getClassId(),
                        c.getClassName(),
                        c.getCourse(),
                        majorMap.getOrDefault(c.getMajorId(), c.getMajorId())
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
            UIUtils.error(this, "Load classes failed: " + e.getMessage());
        }
    }

    private void openForm(ClassDTO seed) {
        ClassFormDialog dlg = new ClassFormDialog(SwingUtilities.getWindowAncestor(this), seed, cachedMajors);
        dlg.setVisible(true);
        if (dlg.isConfirmed()) load();
    }

    private void editSelected() {
        int r = table.getSelectedRow();
        if (r < 0) { UIUtils.error(this,"Select a row"); return; }
        ClassDTO c = new ClassDTO();
        c.setClassId((String) model.getValueAt(r,0));
        c.setClassName((String) model.getValueAt(r,1));
        c.setCourse((String) model.getValueAt(r,2));

        // phải map lại Major từ name sang id
        String majorName = (String) model.getValueAt(r,3);
        for (MajorDTO m : cachedMajors) {
            if (m.getMajorName().equals(majorName)) {
                c.setMajorId(m.getMajorId());
                break;
            }
        }

        openForm(c);
    }

    private void deleteSelected() {
        int r = table.getSelectedRow();
        if (r < 0) { UIUtils.error(this,"Select a row"); return; }
        String id = (String) model.getValueAt(r,0);
        int ok = JOptionPane.showConfirmDialog(this, 
                "Delete class " + id + "?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (ok == JOptionPane.YES_OPTION) {
            try {
                boolean done = RMIConnector.admin().deleteClass(id);
                if (done) { UIUtils.info(this,"Deleted"); load(); }
                else UIUtils.error(this,"Delete failed");
            } catch (Exception e) { e.printStackTrace(); UIUtils.error(this, e.getMessage()); }
        }
    }
}
