package vn.edu.app.client.ui.admin;

import vn.edu.app.client.remote.RMIConnector;
import vn.edu.app.client.ui.dialog.CourseFormDialog;
import vn.edu.app.client.util.UIUtils;
import vn.edu.app.common.dto.CourseDTO;
import vn.edu.app.common.remote.AdminService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

public class CourseManagementPanel extends JPanel {
    private DefaultTableModel model = new DefaultTableModel(new String[]{"Course ID","Course Name","Credits","Semester"},0);
    private JTable table = new JTable(model);

    public CourseManagementPanel() {
        setLayout(new BorderLayout(10,10));
        JPanel top = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton add = new JButton("Add", UIUtils.icon("icons/add.png",18,18));
        JButton edit = new JButton("Edit", UIUtils.icon("icons/edit.png",18,18));
        JButton del  = new JButton("Delete", UIUtils.icon("icons/delete.png",18,18));
        JButton reload = new JButton("Reload", UIUtils.icon("icons/refresh.png",18,18));
        top.add(add); top.add(edit); top.add(del); top.add(reload);
        add(top, BorderLayout.NORTH);
        add(new JScrollPane(table), BorderLayout.CENTER);

        add.addActionListener(e -> openForm(null));
        edit.addActionListener(e -> editSelected());
        del.addActionListener(e -> deleteSelected());
        reload.addActionListener(e -> load());

        load();
    }

    private void load() {
        try {
            List<CourseDTO> list = RMIConnector.admin().getAllCourses();
            model.setRowCount(0);
            for (CourseDTO c : list) {
                model.addRow(new Object[]{ c.getCourseId(), c.getCourseName(), c.getCredits(), c.getSemester() });
            }
        } catch (Exception e) { e.printStackTrace(); UIUtils.error(this, "Load courses failed: " + e.getMessage()); }
    }

    private void openForm(CourseDTO seed) {
        CourseFormDialog dlg = new CourseFormDialog(SwingUtilities.getWindowAncestor(this), seed);
        dlg.setVisible(true);
        if (dlg.isConfirmed()) load();
    }

    private void editSelected() {
        int r = table.getSelectedRow(); if (r<0){ UIUtils.error(this,"Select a row"); return; }
        CourseDTO c = new CourseDTO();
        c.setCourseId((String) model.getValueAt(r,0));
        c.setCourseName((String) model.getValueAt(r,1));
        c.setCredits((Integer) model.getValueAt(r,2));
        c.setSemester((String) model.getValueAt(r,3));
        openForm(c);
    }

    private void deleteSelected() {
        int r = table.getSelectedRow(); if (r<0){ UIUtils.error(this,"Select a row"); return; }
        String id = (String) model.getValueAt(r,0);
        int ok = JOptionPane.showConfirmDialog(this, "Delete course " + id + "?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (ok == JOptionPane.YES_OPTION) {
            try {
                boolean done = RMIConnector.admin().deleteCourse(id);
                if (done) { UIUtils.info(this,"Deleted"); load(); }
                else UIUtils.error(this,"Delete failed");
            } catch (Exception e) { e.printStackTrace(); UIUtils.error(this, e.getMessage()); }
        }
    }
}
